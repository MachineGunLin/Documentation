
msgid ""
msgstr ""
"Project-Id-Version:  megengine\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-12-24 23:51+0800\n"
"PO-Revision-Date: 2022-09-14 03:28+0000\n"
"Last-Translator: \n"
"Language: zh_Hans_CN\n"
"Language-Team: Chinese Simplified\n"
"Plural-Forms: nplurals=1; plural=0\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../source/reference/api/megengine.functional.mod.rst:2
msgid "megengine.functional.mod"
msgstr "megengine.functional.mod"

#: megengine.functional.elemwise.mod:1 of
msgid "Element-wise :math:`\\operatorname{mod}(x, y)` function."
msgstr ""

#: megengine.functional.elemwise.mod:3 of
#, fuzzy
msgid ""
"Returns the remainder of division for each element :math:`x_i` of the "
"input tensor :math:`x` and the respective element :math:`y_i` of the "
"input tensor :math:`y`."
msgstr "返回输入张量 ``x`` 的每个元素 ``x_i`` 和输入张量 ``y`` 的相应元素 ``y_i`` 的除法余数。"

#: megengine.functional.elemwise.mod:8 of
#, python-format
msgid ""
"In general, similar to Python’s % operator, this function is not "
"recommended for floating-point operands as semantics do not follow IEEE "
"754. That this function is specified to accept floating-point operands is"
" primarily for reasons of backward compatibility."
msgstr ""

#: megengine.functional.elemwise.mod:10 of
msgid "``mod`` is an alias of ``remainder`` in NumPy."
msgstr "``mod`` 是 NumPy 中 ``remainder`` 的别名。"

#: megengine.functional.elemwise.mod:12 of
msgid ":func:`~.div` / :func:`~.floor_div`"
msgstr ":func:`~.div` / :func:`~.floor_div`"

#: megengine.functional.elemwise.mod of
msgid "参数"
msgstr "参数"

#: megengine.functional.elemwise.mod:15 of
msgid "dividend input tensor. Should have a numeric data type."
msgstr "被除数输入张量。 应该有一个数字数据类型。"

#: megengine.functional.elemwise.mod:17 of
#, fuzzy
msgid ""
"divisor input tensor. Must be compatible with :math:`x` (see :ref"
":`broadcasting-rule` ). Should have a numeric data type."
msgstr "除数输入张量。 必须与 ``x`` 兼容 (参见 :ref:`broadcasting-rule` )。 应该有一个数字数据类型。"

#: megengine.functional.elemwise.mod of
msgid "返回类型"
msgstr "返回类型"

#: megengine.functional.elemwise.mod:19 of
msgid ":py:class:`~megengine.tensor.Tensor`"
msgstr ":py:class:`~megengine.tensor.Tensor`"

#: megengine.functional.elemwise.mod of
msgid "返回"
msgstr "返回"

#: megengine.functional.elemwise.mod:20 of
msgid ""
"A tensor containing the element-wise results. The returned tensor must "
"have a data type determined by :ref:`dtype-promotion`."
msgstr "包含逐元素结果的张量。 返回的张量必须具有由 :ref:`dtype-promotion` 确定的数据类型。"

#: megengine.functional.elemwise.mod:23 of
msgid "Special cases"
msgstr ""

#: megengine.functional.elemwise.mod:25 of
msgid "For floating-point operands,"
msgstr ""

#: megengine.functional.elemwise.mod:27 of
msgid "If either :math:`x_i` or :math:`y_i` is ``NaN``, the result is ``NaN``."
msgstr ""

#: megengine.functional.elemwise.mod:28 of
msgid ""
"If :math:`x_i` is either ``+infinity`` or ``-infinity`` and :math:`y_i` "
"is either ``+infinity`` or ``-infinity``, the result is ``NaN``."
msgstr ""

#: megengine.functional.elemwise.mod:29 of
msgid ""
"If :math:`x_i` is either ``+0`` or ``-0`` and :math:`y_i` is either "
"``+0`` or ``-0``, the result is ``NaN``."
msgstr ""

#: megengine.functional.elemwise.mod:30 of
msgid ""
"If :math:`x_i` is ``+0`` and :math:`y_i` is greater than 0, the result is"
" ``+0``."
msgstr ""

#: megengine.functional.elemwise.mod:31 of
msgid ""
"If :math:`x_i` is ``-0`` and :math:`y_i` is greater than 0, the result is"
" ``+0``."
msgstr ""

#: megengine.functional.elemwise.mod:32 of
msgid ""
"If :math:`x_i` is ``+0`` and :math:`y_i` is less than 0, the result is "
"``-0``."
msgstr ""

#: megengine.functional.elemwise.mod:33 of
msgid ""
"If :math:`x_i` is ``-0`` and :math:`y_i` is less than 0, the result is "
"``-0``."
msgstr ""

#: megengine.functional.elemwise.mod:34 of
msgid ""
"If :math:`x_i` is greater than ``0`` and :math:`y_i` is ``+0``, the "
"result is ``NaN``."
msgstr ""

#: megengine.functional.elemwise.mod:35 of
msgid ""
"If :math:`x_i` is greater than ``0`` and :math:`y_i` is ``-0``, the "
"result is ``NaN``."
msgstr ""

#: megengine.functional.elemwise.mod:36 of
msgid ""
"If :math:`x_i` is less than ``0`` and :math:`y_i` is ``+0``, the result "
"is ``NaN``."
msgstr ""

#: megengine.functional.elemwise.mod:37 of
msgid ""
"If :math:`x_i` is less than ``0`` and :math:`y_i` is ``-0``, the result "
"is ``NaN``."
msgstr ""

#: megengine.functional.elemwise.mod:38 of
msgid ""
"If :math:`x_i` is ``+infinity`` and :math:`y_i` is a positive (i.e., "
"greater than 0) finite number, the result is ``NaN``."
msgstr ""

#: megengine.functional.elemwise.mod:39 of
msgid ""
"If :math:`x_i` is ``+infinity`` and :math:`y_i` is a negative (i.e., less"
" than 0) finite number, the result is ``NaN``."
msgstr ""

#: megengine.functional.elemwise.mod:40 of
msgid ""
"If :math:`x_i` is ``-infinity`` and :math:`y_i` is a positive (i.e., "
"greater than 0) finite number, the result is ``NaN``."
msgstr ""

#: megengine.functional.elemwise.mod:41 of
msgid ""
"If :math:`x_i` is ``-infinity`` and :math:`y_i` is a negative (i.e., less"
" than 0) finite number, the result is ``NaN``."
msgstr ""

#: megengine.functional.elemwise.mod:42 of
msgid ""
"If :math:`x_i` is a positive (i.e., greater than ``0``) finite number and"
" :math:`y_i` is ``+infinity``, the result is :math:`x_i`. (note: this "
"result matches Python behavior.)"
msgstr ""

#: megengine.functional.elemwise.mod:44 of
msgid ""
"If :math:`x_i` is a positive (i.e., greater than ``0``) finite number and"
" :math:`y_i` is ``-infinity``, the result is :math:`y_i`. (note: this "
"result matches Python behavior.)"
msgstr ""

#: megengine.functional.elemwise.mod:46 of
msgid ""
"If :math:`x_i` is a negative (i.e., less than ``0``) finite number and "
":math:`y_i` is ``+infinity``, the result is :math:`y_i`. (note: this "
"results matches Python behavior.)"
msgstr ""

#: megengine.functional.elemwise.mod:48 of
msgid ""
"If :math:`x_i` is a negative (i.e., less than ``0``) finite number and "
":math:`y_i` is ``-infinity``, the result is :math:`x_i`. (note: this "
"result matches Python behavior.)"
msgstr ""

#: megengine.functional.elemwise.mod:50 of
msgid ""
"In the remaining cases, the result must match that of the Python ``%`` "
"operator."
msgstr ""

#: megengine.functional.elemwise.mod:53 of
msgid "实际案例"
msgstr "实际案例"

#: megengine.functional.elemwise.mod:57 of
msgid "Element-wise mod:"
msgstr ""

#: megengine.functional.elemwise.mod:64 of
msgid "Broadcasting:"
msgstr ""

#~ msgid "Element-wise `remainder of division`."
#~ msgstr "返回逐元素相除所得的余数。"

