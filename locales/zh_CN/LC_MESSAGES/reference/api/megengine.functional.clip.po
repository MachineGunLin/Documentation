
msgid ""
msgstr ""
"Project-Id-Version:  megengine\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-12-24 23:51+0800\n"
"PO-Revision-Date: 2022-08-04 09:13+0000\n"
"Last-Translator: \n"
"Language: zh_Hans_CN\n"
"Language-Team: Chinese Simplified\n"
"Plural-Forms: nplurals=1; plural=0\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../source/reference/api/megengine.functional.clip.rst:2
msgid "megengine.functional.clip"
msgstr "megengine.functional.clip"

#: megengine.functional.elemwise.clip:1 of
msgid "Element-wise clipping function."
msgstr ""

#: megengine.functional.elemwise.clip:3 of
msgid ""
"Clamps(limits) all elements :math:`x_i` of the input tensor :math:`x` "
"into the range ``[ lower, upper ]``. For example, if a range of ``[0, "
"1]`` is specified, values smaller than ``0`` become ``0``, and values "
"larger than ``1`` become ``1``."
msgstr ""

#: megengine.functional.elemwise.clip:7 of
msgid ""
"y_i = \\begin{cases}\n"
"    \\text{lower} & \\text{if } x_i < \\text{lower} \\\\\n"
"    x_i & \\text{if } \\text{lower} \\leq x_i \\leq \\text{upper} \\\\\n"
"    \\text{upper} & \\text{if } x_i > \\text{upper}\n"
"\\end{cases}"
msgstr ""
"y_i = \\begin{cases}\n"
"    \\text{lower} & \\text{if } x_i < \\text{lower} \\\\\n"
"    x_i & \\text{if } \\text{lower} \\leq x_i \\leq \\text{upper} \\\\\n"
"    \\text{upper} & \\text{if } x_i > \\text{upper}\n"
"\\end{cases}"

#: megengine.functional.elemwise.clip:15 of
msgid "Equivalent to ``F.minimum(upper, np.maximum(x, upper))`` right now."
msgstr ""

#: megengine.functional.elemwise.clip of
msgid "参数"
msgstr "参数"

#: megengine.functional.elemwise.clip:18 of
#, fuzzy
msgid "The input tensor."
msgstr "(Tensor): 输入张量。"

#: megengine.functional.elemwise.clip:19 of
#, fuzzy
msgid ""
"lower-bound of the range to be clamped to. Should have a numeric data "
"type."
msgstr "(Numberic，optional): 限制区间的下界。"

#: megengine.functional.elemwise.clip:20 of
#, fuzzy
msgid ""
"upper-bound of the range to be clamped to. Should have a numeric data "
"type."
msgstr "(Numberic，optional): 限制区间的上界。"

#: megengine.functional.elemwise.clip:24 of
#, fuzzy
msgid "If both ``lower`` and ``upper`` are None, raises an ``AssertionError``."
msgstr "如果 `lower` 和 `upper` 都是 None, 触发 AssertionError."

#: megengine.functional.elemwise.clip:25 of
msgid "If ``lower`` is None, equivalent to ``F.minimum(x, upper)``."
msgstr ""

#: megengine.functional.elemwise.clip:26 of
msgid "If ``upper`` is None, equivalent to ``F.maximum(x, lower)``."
msgstr ""

#: megengine.functional.elemwise.clip:27 of
#, fuzzy
msgid ""
"If ``lower`` is bigger than ```upper``, the result is same as "
"``clip(Tensor(), upper, upper)``."
msgstr "如果 `lower` 大于 `upper`, 结果和 `clip(Tensor(), upper, upper)` 相同。"

#: megengine.functional.elemwise.clip of
msgid "返回类型"
msgstr "返回类型"

#: megengine.functional.elemwise.clip:29 of
msgid ":py:class:`~megengine.tensor.Tensor`"
msgstr ":py:class:`~megengine.tensor.Tensor`"

#: megengine.functional.elemwise.clip of
msgid "返回"
msgstr "返回"

#: megengine.functional.elemwise.clip:30 of
msgid ""
"output clamped tensor. The result must have a data type determined by "
":ref:`dtype-promotion`."
msgstr "输出被限制区间后的张量。 返回结果的数据类型由 :ref:`dtype-promotion` 决定。"

#~ msgid ""
#~ "y_i = \\begin{cases}     \\text{lower} & "
#~ "\\text{if } x_i < \\text{lower} \\\\"
#~ "     x_i & \\text{if } \\text{lower} "
#~ "\\leq x_i \\leq \\text{upper} \\\\     "
#~ "\\text{upper} & \\text{if } x_i > "
#~ "\\text{upper} \\end{cases}"
#~ msgstr ""

#~ msgid ":py:class:`~megengine.tensor.Tensor`"
#~ msgstr ":py:class:`~megengine.tensor.Tensor`"

#~ msgid ""
#~ "y_i = \\begin{cases}\n"
#~ "    \\text{lower} & \\text{if } x_i < \\text{lower} \\\\\n"
#~ "    x_i & \\text{if } \\text{lower} "
#~ "\\leq x_i \\leq \\text{upper} \\\\\n"
#~ "    \\text{upper} & \\text{if } x_i > \\text{upper}\n"
#~ "\\end{cases}\n"
#~ "\n"
#~ msgstr ""

#~ msgid ""
#~ "y_i = egin{cases}\n"
#~ "        ext{lower} &    ext{if } x_i <  ext{lower} \\\n"
#~ "    x_i &       ext{if }        "
#~ "ext{lower} \\leq x_i \\leq        ext{upper}"
#~ " \\\n"
#~ "        ext{upper} &    ext{if } x_i >  ext{upper}\n"
#~ "\\end{cases}\n"
#~ "\n"
#~ msgstr ""

#~ msgid "返回类型"
#~ msgstr "返回类型"

#~ msgid "Examples:"
#~ msgstr "例如："

#~ msgid "output clamped tensor."
#~ msgstr "输出经过区间限定的张量。"

#~ msgid "Outputs:"
#~ msgstr "输出："

#~ msgid "实际案例"
#~ msgstr "实际案例"

#~ msgid ""
#~ "Clamps all elements in input tensor "
#~ "into the range ``[ lower, upper "
#~ "]`` and returns a resulting tensor:"
#~ msgstr "将输入张量的所有元素限制在 ``[ lower, upper ]`` 区间并返回相应的结果："

